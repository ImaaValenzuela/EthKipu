{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_bankCap",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_withdrawalLimit",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "BankCapExceeded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ContractPaused",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DepositTooSmall",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidWithdrawalAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlyOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "WithdrawalLimitExceeded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroDeposit",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBalance",
						"type": "uint256"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "by",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "by",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBalance",
						"type": "uint256"
					}
				],
				"name": "Withdrawal",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MINIMUM_DEPOSIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "WITHDRAWAL_LIMIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "bankCap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "depositCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBankStats",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_totalDeposits",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_depositCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_withdrawalCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_availableCapacity",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getMaxWithdrawal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMyBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalDeposits",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "vaults",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawalCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "ImaaValenzuela",
			"details": "Implementa patrones de seguridad: checks-effects-interactions, errores personalizados,       circuit breaker y protección contra reentrancy  Características principales: - Depósitos con mínimo de 0.001 ETH - Retiros limitados por transacción - Límite global de capacidad del banco - Sistema de pausa de emergencia (circuit breaker) - Protección contra reentrancy - Control de acceso para funciones administrativas",
			"errors": {
				"BankCapExceeded()": [
					{
						"details": "Se lanza si totalDeposits + msg.value > bankCap"
					}
				],
				"ContractPaused()": [
					{
						"details": "Se lanza si se intenta operar mientras paused == true"
					}
				],
				"DepositTooSmall()": [
					{
						"details": "Se lanza si msg.value < MINIMUM_DEPOSIT"
					}
				],
				"InsufficientBalance()": [
					{
						"details": "Se lanza si vaults[msg.sender] < amount solicitado"
					}
				],
				"InvalidWithdrawalAmount()": [
					{
						"details": "Se lanza si amount == 0"
					}
				],
				"OnlyOwner()": [
					{
						"details": "Se lanza si msg.sender != owner"
					}
				],
				"TransferFailed()": [
					{
						"details": "Se lanza si call{value}() retorna false"
					}
				],
				"WithdrawalLimitExceeded()": [
					{
						"details": "Se lanza si amount > WITHDRAWAL_LIMIT"
					}
				],
				"ZeroDeposit()": [
					{
						"details": "Se lanza si msg.value == 0"
					}
				]
			},
			"events": {
				"Deposit(address,uint256,uint256)": {
					"params": {
						"amount": "Cantidad depositada en wei",
						"newBalance": "Nuevo balance total del usuario en su bóveda",
						"user": "Dirección del usuario que realizó el depósito"
					}
				},
				"Paused(address)": {
					"params": {
						"by": "Dirección que pausó el contrato"
					}
				},
				"Unpaused(address)": {
					"params": {
						"by": "Dirección que despausó el contrato"
					}
				},
				"Withdrawal(address,uint256,uint256)": {
					"params": {
						"amount": "Cantidad retirada en wei",
						"newBalance": "Nuevo balance restante del usuario en su bóveda",
						"user": "Dirección del usuario que realizó el retiro"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Ejemplo de despliegue:      - _bankCap: 100 ether (100000000000000000000)      - _withdrawalLimit: 0.1 ether (100000000000000000)      El deployer se convierte automáticamente en el owner",
					"params": {
						"_bankCap": "Límite total de depósitos que el banco puede aceptar (en wei)",
						"_withdrawalLimit": "Límite máximo de retiro por transacción (en wei)"
					}
				},
				"deposit()": {
					"details": "Implementa el patrón checks-effects-interactions:      1. CHECKS: Valida que no esté pausado, monto mínimo y límite del banco      2. EFFECTS: Actualiza estado (vaults, totalDeposits, depositCount)      3. INTERACTIONS: Emite evento  Requisitos: - El contrato no debe estar pausado - msg.value debe ser > 0 - msg.value debe ser >= MINIMUM_DEPOSIT (0.001 ETH) - El depósito no debe hacer que totalDeposits exceda bankCap  Emite un evento {Deposit}  Ejemplo de uso: kipuBank.deposit{value: 0.5 ether}();"
				},
				"getBalance(address)": {
					"details": "Función pública de solo lectura, no modifica el estado  Ejemplo de uso: uint256 myBalance = kipuBank.getBalance(msg.sender);",
					"params": {
						"user": "Dirección del usuario a consultar"
					},
					"returns": {
						"_0": "Balance del usuario en wei"
					}
				},
				"getBankStats()": {
					"details": "Útil para dashboards y monitoreo del estado del banco  Ejemplo de uso: (uint256 total, uint256 deposits, uint256 withdrawals, uint256 available) = kipuBank.getBankStats();",
					"returns": {
						"_availableCapacity": "Capacidad restante del banco (bankCap - totalDeposits)",
						"_depositCount": "Número acumulado de operaciones de depósito",
						"_totalDeposits": "Total de fondos depositados actualmente en el banco",
						"_withdrawalCount": "Número acumulado de operaciones de retiro"
					}
				},
				"getMaxWithdrawal(address)": {
					"params": {
						"user": "Dirección del usuario a consultar"
					},
					"returns": {
						"_0": "Monto máximo que puede retirar (el menor entre su balance y WITHDRAWAL_LIMIT)"
					}
				},
				"getMyBalance()": {
					"details": "Función conveniente para que usuarios consulten su propio balance",
					"returns": {
						"_0": "Balance del msg.sender en wei"
					}
				},
				"isPaused()": {
					"returns": {
						"_0": "true si está pausado, false si está operativo"
					}
				},
				"pause()": {
					"details": "Solo puede ser ejecutado por el owner      Previene depósitos y retiros mientras está pausado  Emite un evento {Paused}"
				},
				"unpause()": {
					"details": "Solo puede ser ejecutado por el owner  Emite un evento {Unpaused}"
				},
				"withdraw(uint256)": {
					"custom:security": "Actualiza el estado antes de la transferencia para prevenir reentrancy  Ejemplo de uso: kipuBank.withdraw(0.05 ether);",
					"details": "Implementa checks-effects-interactions y protección contra reentrancy:      1. CHECKS: Valida que no esté pausado, monto, balance y límite de retiro      2. EFFECTS: Actualiza estado antes de transferir      3. INTERACTIONS: Transfiere ETH usando call (seguro)  Requisitos: - El contrato no debe estar pausado - amount debe ser > 0 (validado por modificador) - Usuario debe tener balance suficiente en su bóveda - amount no debe exceder WITHDRAWAL_LIMIT  Emite un evento {Withdrawal} ",
					"params": {
						"amount": "Cantidad a retirar en wei"
					}
				},
				"withdrawAll()": {
					"details": "Alternativa conveniente a withdraw(amount) que previene errores de cálculo      Respeta el límite de retiro por transacción  Requisitos: - El contrato no debe estar pausado - El usuario debe tener balance > 0  Emite un evento {Withdrawal}  Nota: Si el balance es mayor al WITHDRAWAL_LIMIT, solo retira hasta el límite"
				}
			},
			"stateVariables": {
				"MINIMUM_DEPOSIT": {
					"details": "Definido como constante: 0.001 ETH (1000000000000000 wei)"
				},
				"WITHDRAWAL_LIMIT": {
					"details": "Establecido en el constructor como immutable para optimizar gas      Valor recomendado: 0.1 ETH (100000000000000000 wei)"
				},
				"bankCap": {
					"details": "Se establece en el constructor. Una vez alcanzado, no se permiten más depósitos      Valor recomendado: 100 ETH"
				},
				"depositCount": {
					"details": "Se incrementa cada vez que un usuario deposita, independientemente del monto"
				},
				"owner": {
					"details": "Tiene permisos administrativos como pausar el contrato"
				},
				"paused": {
					"details": "true = contrato pausado, false = contrato operativo"
				},
				"totalDeposits": {
					"details": "Se actualiza en cada depósito (suma) y retiro (resta)"
				},
				"vaults": {
					"details": "Cada dirección tiene su propia bóveda individual      address => balance en wei"
				},
				"withdrawalCount": {
					"details": "Se incrementa cada vez que un usuario retira fondos exitosamente"
				}
			},
			"title": "KipuBank",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"BankCapExceeded()": [
					{
						"notice": "Error cuando el depósito excedería el límite total del banco"
					}
				],
				"ContractPaused()": [
					{
						"notice": "Error cuando el contrato está pausado"
					}
				],
				"DepositTooSmall()": [
					{
						"notice": "Error cuando el monto depositado es menor al mínimo permitido"
					}
				],
				"InsufficientBalance()": [
					{
						"notice": "Error cuando el usuario no tiene fondos suficientes para retirar"
					}
				],
				"InvalidWithdrawalAmount()": [
					{
						"notice": "Error cuando se intenta retirar cero o un monto inválido"
					}
				],
				"OnlyOwner()": [
					{
						"notice": "Error cuando alguien que no es el owner intenta ejecutar funciones administrativas"
					}
				],
				"TransferFailed()": [
					{
						"notice": "Error cuando la transferencia de ETH falla"
					}
				],
				"WithdrawalLimitExceeded()": [
					{
						"notice": "Error cuando el retiro solicitado excede el límite por transacción"
					}
				],
				"ZeroDeposit()": [
					{
						"notice": "Error cuando se intenta depositar 0 ETH"
					}
				]
			},
			"events": {
				"Deposit(address,uint256,uint256)": {
					"notice": "Se emite cuando un usuario deposita fondos exitosamente"
				},
				"Paused(address)": {
					"notice": "Se emite cuando el contrato es pausado"
				},
				"Unpaused(address)": {
					"notice": "Se emite cuando el contrato es despausado"
				},
				"Withdrawal(address,uint256,uint256)": {
					"notice": "Se emite cuando un usuario retira fondos exitosamente"
				}
			},
			"kind": "user",
			"methods": {
				"MINIMUM_DEPOSIT()": {
					"notice": "Depósito mínimo requerido para usar el banco"
				},
				"WITHDRAWAL_LIMIT()": {
					"notice": "Límite máximo de retiro por transacción"
				},
				"bankCap()": {
					"notice": "Límite total de depósitos que el banco puede aceptar"
				},
				"constructor": {
					"notice": "Inicializa el contrato KipuBank con parámetros configurables"
				},
				"deposit()": {
					"notice": "Permite a los usuarios depositar ETH en su bóveda personal"
				},
				"depositCount()": {
					"notice": "Contador global del número de depósitos realizados"
				},
				"getBalance(address)": {
					"notice": "Obtiene el balance de una dirección específica en su bóveda"
				},
				"getBankStats()": {
					"notice": "Obtiene estadísticas generales del banco"
				},
				"getMaxWithdrawal(address)": {
					"notice": "Calcula cuánto puede retirar un usuario en la próxima transacción"
				},
				"getMyBalance()": {
					"notice": "Obtiene el balance del caller (quien llama la función)"
				},
				"isPaused()": {
					"notice": "Verifica si el contrato está actualmente pausado"
				},
				"owner()": {
					"notice": "Dirección del propietario del contrato"
				},
				"pause()": {
					"notice": "Pausa el contrato en caso de emergencia (circuit breaker)"
				},
				"paused()": {
					"notice": "Estado del circuit breaker para pausar el contrato en emergencias"
				},
				"totalDeposits()": {
					"notice": "Total acumulado de fondos depositados actualmente en el banco"
				},
				"unpause()": {
					"notice": "Despausa el contrato y reanuda operaciones normales"
				},
				"vaults(address)": {
					"notice": "Mapeo de direcciones de usuarios a sus balances en la bóveda"
				},
				"withdraw(uint256)": {
					"notice": "Permite a los usuarios retirar ETH de su bóveda personal"
				},
				"withdrawAll()": {
					"notice": "Permite al usuario retirar todo su balance disponible"
				},
				"withdrawalCount()": {
					"notice": "Contador global del número de retiros realizados"
				}
			},
			"notice": "Sistema de bóveda bancaria descentralizada que permite depósitos y retiros controlados",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/KipuBank.sol": "KipuBank"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/KipuBank.sol": {
			"keccak256": "0xf5fe9be2b57fb9e30ff2fa2e8a9891432bc1c4dde82d475d6d1825f456bf0f00",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://3905327b7e8c0ae8b32db755fd6f56b4a609a4b6d6a81b2c1dcd1bd731dafb62",
				"dweb:/ipfs/Qmdn6AyogeFTFY9g7ry1tB6Jm7LTrWbe166YWTfzKfGkfw"
			]
		}
	},
	"version": 1
}